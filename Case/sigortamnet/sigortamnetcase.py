# -*- coding: utf-8 -*-
"""sigortamnetcase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s7muV1dWOaOqK48qNTP-LBiCOvywtUay
"""

# Step 1: Import the required libraries
import pandas as pd
import sqlite3
import pyarrow.feather as feather

# Step 2: Read the Feather file
feather_file_path = 'first_question_data.feather'  # Replace with the actual file path
data_frame = feather.read_feather(feather_file_path)

# Step 3: Create a SQLite database and table
db_path = 'database.db'  # Replace with your desired database name
table_name = 'customers'     # Replace with your desired table name

# Connect to the SQLite database (it will be created if not already existent)
conn = sqlite3.connect(db_path)

# Use pd.to_sql() to create the table and insert data
data_frame.to_sql(table_name, conn, if_exists='replace', index=False)

# Commit the changes and close the connection
conn.commit()
conn.close()

print(f"Data from '{feather_file_path}' has been successfully imported into '{table_name}' in '{db_path}'.")

# Step 1: Import the required libraries
import pandas as pd
import sqlite3

# Step 2: Connect to the SQLite database
db_path = 'database.db'  # Replace with your database file path
conn = sqlite3.connect(db_path)

# Step 3: Write and execute a SQL query using pd.read_sql()
query = 'SELECT * FROM customers'  # Replace 'your_table' with the actual table name
query_result = pd.read_sql(query, conn)


# Step 5: Display the query results (the DataFrame)
query_result

query = '''SELECT
    count(distinct id) as sales_count,
    count(distinct customer_id) as customer_count,
    sum(amount) as total_amount_sumation,
    DATE(
        substr(sales_date_id, 1, 4) || "-" || substr(sales_date_id, 5, 2) || "-" || substr(sales_date_id, 7, 2)
    ) AS sales_date
FROM
    customers
group by
    4'''
# Replace 'your_table' with the actual table name
query_result = pd.read_sql(query, conn)

# Step 4: Close the connection

# Step 5: Display the query results (the DataFrame)
query_result

import plotly.graph_objects as go
from plotly.subplots import make_subplots


# Create a subplot with two y-axes
fig = make_subplots(specs=[[{"secondary_y": True}]])

# Add traces for sales count and customer count
fig.add_trace(
    go.Scatter(x=query_result['sales_date'], y=query_result['sales_count'], name="Sales Count"),
    secondary_y=False,
)

fig.add_trace(
    go.Scatter(x=query_result['sales_date'], y=query_result['customer_count'], name="Customer Count"),
    secondary_y=False,
)

# Add trace for total amount summation
fig.add_trace(
    go.Scatter(x=query_result['sales_date'], y=query_result['total_amount_sumation'], name="Total Amount Sum"),
    secondary_y=True,
)

# Update layout
fig.update_layout(title_text="Sales Metrics Over Time with Two Y-Axes")
fig.update_xaxes(title_text='Sales Date')

# Update y-axis labels
fig.update_yaxes(title_text="Counts", secondary_y=False)
fig.update_yaxes(title_text="Total Amount Sum", secondary_y=True)

# Show the plot
fig.show()

query_result

import pandas as pd
import sqlite3
import matplotlib.pyplot as plt

# Connect to the SQLite database
db_path = 'database.db'  # Replace with your database file path
conn = sqlite3.connect(db_path)

# Write and execute the SQL query
query = '''SELECT
    strftime('%Y-%m', DATE(
        substr(sales_date_id, 1, 4) || "-" || substr(sales_date_id, 5, 2) || "-" || substr(sales_date_id, 7, 2))
    ) AS sales_month,
    customer_id,
    count(id) as sales_count,
    sum(amount) as total_amount
FROM
    customers
GROUP BY
    1, 2'''
query_result = pd.read_sql(query, conn)

# Close the connection
conn.close()

# Plotting
plt.figure(figsize=(12, 6))
for customer_id in query_result['customer_id'].unique():
    customer_data = query_result[query_result['customer_id'] == customer_id]
    plt.plot(customer_data['sales_month'], customer_data['sales_count'], label=f'Customer {customer_id}')

plt.xlabel('Sales Month')
plt.ylabel('Sales Count')
plt.title('Monthly Sales Comparison for Customers')
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import sqlite3

# Connect to the SQLite database
db_path = 'your_database.db'  # Replace with your database file path
conn = sqlite3.connect(db_path)

# Write and execute the SQL query
query = '''SELECT
    sales_date_id,
    max(amount) as max_amount,
    median(amount) as median_amount,
    avg(amount) as average_amount
FROM
    customers
WHERE
    sales_date_id BETWEEN DATE(sales_date_id, '-20 days') AND DATE(sales_date_id)
GROUP BY
    sales_date_id'''
query_result = pd.read_sql(query, conn)

# Close the connection
conn.close()

# Display the query result
print(query_result)

SELECT
    strftime('%Y-%m', DATE(
        substr(sales_date_id, 1, 4) || "-" || substr(sales_date_id, 5, 2) || "-" || substr(sales_date_id, 7, 2))
    ) AS sales_month,
    customer_id,
    count(id) as sales_count,
    sum(amount) as total_amount
FROM
    sales_detail
GROUP BY
    1, 2;

SELECT
    strftime('%Y-%m', DATE(
        substr(sales_date_id, 1, 4) || "-" || substr(sales_date_id, 5, 2) || "-" || substr(sales_date_id, 7, 2))
    ) AS sales_month,
    customer_id,
    count(id) as sales_count
FROM
    sales_detail
GROUP BY
    1, 2
HAVING
    sales_count > 100;

SELECT
    strftime('%Y-%m', DATE(
        substr(sales_date_id, 1, 4) || "-" || substr(sales_date_id, 5, 2) || "-" || substr(sales_date_id, 7, 2))
    ) AS sales_month,
    customer_id,
    sum(amount) as total_amount
FROM
    sales_detail
GROUP BY
    1, 2
HAVING
    count(id) > 100 AND total_amount > 20000;

-- Create the category_commission table
CREATE TABLE category_commission (
    category_id INT PRIMARY KEY,
    commission_rate DECIMAL(10, 4)
);

-- Create the product_commission table
CREATE TABLE product_commission (
    product_id INT PRIMARY KEY,
    commission_rate DECIMAL(10, 4)
);

SELECT
    s.sales_id,
    s.sales_datetime,
    s.sales_amount,
    CASE
        WHEN c.commission_rate IS NOT NULL THEN s.sales_amount * c.commission_rate
        WHEN p.commission_rate IS NOT NULL THEN s.sales_amount * p.commission_rate
        ELSE 0
    END AS commission_amount
FROM
    sales s
LEFT JOIN
    category_commission c ON s.category_id = c.category_id
LEFT JOIN
    product_commission p ON s.product_id = p.product_id;